/* DocIntel
 * Copyright (C) 2018-2023 Belgian Defense, Antoine Cailliau, Kevin Menten
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using DocIntel.Core.Models;
using DocIntel.Core.Repositories;
using DocIntel.Core.Settings;
using Microsoft.Extensions.Logging;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.Processing;

namespace DocIntel.Core.Utils.Thumbnail
{
    public class PDF2PPMThumbnailUtility : IThumbnailUtility
    {
        private readonly ApplicationSettings _configuration;
        private readonly IDocumentRepository _documentRepository;
        private readonly ILogger _logger;

        public PDF2PPMThumbnailUtility(ApplicationSettings configuration, ILogger<PDF2PPMThumbnailUtility> logger,
            IDocumentRepository documentRepository)
        {
            _configuration = configuration;
            _logger = logger;
            _documentRepository = documentRepository;
        }

        public async Task<bool> GenerateThumbnail(AmbientContext context, Document document)
        {
            var res = true;
            var files = document.Files.ToArray();

            context.DatabaseContext.RemoveRange(files.Where(_ => _.AutoGenerated));
            
            foreach (var file in files.Where(_ => _.MimeType.StartsWith("image/") & !_.AutoGenerated))
                res &= await SaveImageThumbnail(context, file);
            
            foreach (var file in files.Where(_ => _.MimeType == "application/pdf" & !_.AutoGenerated))
                res &= await SavePDFThumbnail(context, file);
            
            return res;
        }

        private async Task<bool> SaveImageThumbnail(AmbientContext context, DocumentFile file)
        {
            var filename = Path.Combine(_configuration.DocFolder, file.Filepath);
            _logger.LogDebug("Thumbnail image:" + filename);

            if (!File.Exists(filename))
            {
                _logger.LogWarning("Could not locate file");
                return false;
            }

            try
            {
                await using var memoryStream = new MemoryStream();
                using var image = await Image.LoadAsync(File.OpenRead(filename));
                image.Mutate(x => x.Resize(new ResizeOptions
                {
                    Size = new Size(512, 512),
                    Mode = ResizeMode.Min
                }));
                image.Mutate(x => x.Crop(512, 512));
                await image.SaveAsPngAsync(memoryStream);
                
                await SaveThumbnail(context, file, memoryStream);
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                _logger.LogError(e.StackTrace);
            }

            return true;
        }

        private async Task<bool> SavePDFThumbnail(AmbientContext context, DocumentFile file)
        {
            var pdfFilename = Path.Combine(_configuration.DocFolder, file.Filepath);
            if (!File.Exists(pdfFilename))
            {
                _logger.LogWarning("Could not locate file");
                return false;
            }

            var tempFilePath = Path.GetTempFileName();

            try
            {
                var command = "pdftoppm";
                var args = $"{pdfFilename} {tempFilePath} -png -f 1 -singlefile";
                var psi = new ProcessStartInfo(command)
                {
                    Arguments = args,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };
                _logger.LogDebug(psi.FileName + " " + psi.Arguments);
                var proc = Process.Start(psi);
                if (proc != null)
                {
                    await proc.WaitForExitAsync();
                    var exitCode = proc.ExitCode;
                    proc.Close();
                }

                await using var memoryStream = new MemoryStream();
                using var image = await Image.LoadAsync(File.OpenRead(tempFilePath + ".png"));
                image.Mutate(x => x.Resize(new ResizeOptions
                {
                    Size = new Size(512, 512),
                    Mode = ResizeMode.Min
                }));
                image.Mutate(x => x.Crop(512, 512));
                await image.SaveAsPngAsync(memoryStream);

                await SaveThumbnail(context, file, memoryStream);
                
                return true;
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                _logger.LogError(e.StackTrace);
            }
            finally
            {
                if (File.Exists(tempFilePath))
                    File.Delete(tempFilePath);

                if (File.Exists(tempFilePath + ".png"))
                    File.Delete(tempFilePath + ".png");
            }

            return false;
        }

        private async Task SaveThumbnail(AmbientContext context, DocumentFile file, MemoryStream memoryStream)
        {
            try
            {
                var df = new DocumentFile
                {
                    DocumentId = file.DocumentId,
                    Filename = Path.GetFileNameWithoutExtension(file.Filename) + ".png",
                    MimeType = "image/png",
                    DocumentDate = DateTime.UtcNow,
                    Title = "Thumbnail (" + file.Title + ")",
                    AutoGenerated = true,
                    Document = file.Document
                };

                df = await _documentRepository.AddFile(context, df, memoryStream);
                _logger.LogDebug("Saved thumbnail for " + file.FileId + " in " + df.Filepath);
                file.Document.ThumbnailId = df.FileId;
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                _logger.LogError(e.StackTrace);
            }
        }
    }
}